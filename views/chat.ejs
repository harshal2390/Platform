<% layout("layouts/boilerplate") %>

<style>
  body {
    background: #e5ddd5;
  }
  .chat-container {
    max-width: 800px;
    margin: 30px auto;
    background: #fff;
    border-radius: 15px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 90vh;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  .chat-header {
    background: #075e54;
    color: #fff;
    padding: 15px;
    font-weight: bold;
    display: flex;
    align-items: center;
  }
  .chat-header img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
  }
  .chat-body {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    background: #ece5dd;
    display: flex;
    flex-direction: column;
  }
  .message {
    max-width: 60%;
    padding: 10px 14px;
    margin-bottom: 12px;
    border-radius: 15px;
    position: relative;
    font-size: 14px;
    word-wrap: break-word;
  }
  .sent {
    background: #dcf8c6;
    align-self: flex-end;
    border-bottom-right-radius: 0;
  }
  .received {
    background: #fff;
    align-self: flex-start;
    border-bottom-left-radius: 0;
  }
  .chat-footer {
    padding: 12px;
    background: #f0f0f0;
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  .chat-footer input {
    flex: 1;
    border: none;
    border-radius: 20px;
    padding: 10px 15px;
    outline: none;
  }
  .chat-footer button {
    background: #075e54;
    color: #fff;
    border: none;
    padding: 10px 18px;
    border-radius: 50%;
    cursor: pointer;
  }
</style>

<div class="chat-container">
  <div class="chat-header">
    <img
      src="https://ui-avatars.com/api/?name=<%= contract.project.title %>"
      alt="user"
    />
    <div>Chat for <%= contract.project.title %></div>
  </div>

  <div id="chatBox" class="chat-body">
    <% messages.forEach(msg => { %>
    <div
      class="message <%= msg.senderId.equals(user._id) ? 'sent' : 'received' %>"
    >
      <%= msg.message %>
      <div
        style="
          font-size: 10px;
          text-align: right;
          margin-top: 5px;
          opacity: 0.6;
        "
      >
        <%= msg.createdAt.toLocaleTimeString([], { hour: '2-digit', minute:
        '2-digit' }) %>
      </div>
    </div>
    <% }) %>
  </div>

  <form id="chatForm" class="chat-footer">
    <div style="display: flex; gap: 10px">
      <input
        type="text"
        id="messageInput"
        placeholder="Type a message..."
        required
      />
      <button type="submit">➤</button>
    </div>
  </form>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  console.log("Loading socket.io client script...");

  const socket = io();

  // Only log ID after connection is established
  socket.on("connect", () => {
    console.log("✅ Socket connected with ID:", socket.id);
    console.log("Transport type:", socket.io.engine.transport.name);

    // Debug: listen for upgrade event (polling → websocket)
    socket.io.engine.on("upgrade", (transport) => {
      console.log("🔄 Transport upgraded to:", transport.name);
    });
  });

  const roomId = "<%= contract._id %>";
  const userId = "<%= user._id %>";

  const receiverId =
    "<%= user._id.equals(contract.freelancer._id) ? contract.employer._id : contract.freelancer._id %>";

  // Join socket room for this contract
  socket.emit("joinRoom", roomId);

  const chatBox = document.getElementById("chatBox");
  const form = document.getElementById("chatForm");
  const input = document.getElementById("messageInput");

  // Handle sending message (via API)
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const msg = input.value.trim();
    if (!msg) return;

    try {
      await fetch("/chat/send", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({
          receiverId,
          contractId: roomId,
          message: msg,
        }),
      });
    } catch (err) {
      console.error("❌ Failed to send:", err);
    }

    input.value = "";
  });

  // Listen for new messages
  socket.on("newMessage", (msgData) => {
    const div = document.createElement("div");
    div.className =
      "message " + (msgData.senderId === userId ? "sent" : "received");
    div.innerHTML = `
      ${msgData.message}
      <div style="font-size:10px; text-align:right; margin-top:5px; opacity:0.6;">
        ${new Date(msgData.createdAt).toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        })}
      </div>
    `;
    chatBox.appendChild(div);
    chatBox.scrollTop = chatBox.scrollHeight;
  });
</script>
